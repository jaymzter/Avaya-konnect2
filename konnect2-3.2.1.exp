#!/usr/bin/expect --

############################################################################## 
#
# Name		: konnect2
# Purpose	: lightweight connect2 emulator
# Author	: Jamie Sims
# Changelog	: v3.2.1
# TODO		: 
############################################################################## 

#----------------------------------------------------------------------------- 
# procs
#----------------------------------------------------------------------------- 

############################################################################
#
#  Name    : syntax
#  Purpose : validate enough parameters to get started
#  Notes   : 
#
############################################################################
proc syntax {} {
	global argc argv0

	if { $argc < 2 } {
		disperr $argv0
	}
}

############################################################################
#
#  Name    : disperr
#  Purpose : display error msg
#  Notes   : 
#
############################################################################
proc disperr {name} {
	send_error "ERROR: Not enough parameters
USAGE: 
$name \<username\> \<hostname\> \[-s\]
or
$name fmt \<filename\>
or
$name script \<username\> \<hostname\> ossi_script \[port\]

username - username to connect with
hostname - remote host fqdn or IP addr
fmt \<filename\> - formats output from a previously run ossi script
where format is tab separated output
-s - for use when connecting directly to SAT of Avaya CM
script - directly run an ossi script on \<hostname\>. Defaults to port 5022

Once connected, the following internal commands are available:

~~ to send a ~
~h internal help message
~o run an OSSI script \(ONLY for use in Avaya SAT\)
~r enable writing logfile on localhost
~s disable logfile
~q to quit
~x to run a local shell
"
	exit
}

############################################################################
#
#  Name    : interact_help
#  Purpose : display help msg for interact session
#  Notes   : statements sent via send_user will make it into the logfile,
#  	     whereas statements sent with puts do not
#
############################################################################
proc interact_help {} {
global argv0
        puts "\n$argv0: You may use ~ followed by:
        ~ to send a ~
        h this message
	o run an OSSI script \(ONLY for use in Avaya SAT\)
        r enable writing logfile on localhost
        s disable logfile
        q to quit
        x to run a local shell"
        send "\n"
}

############################################################################
#
#  Name    : lab_auth
#  Purpose : special checks for lab environment
#  Notes   : 
#
############################################################################
proc lab_auth {} {
	
	global login
	set timeout -1
	set list {admin craft root user4 user5}

	if { [lsearch $list $login] != -1 } {
		if {$login == "admin"} {
			set pass admin01
			return "$pass\r"
		} elseif { $login == "craft"} {
			set pass craft01
			return "$pass\r"
		} elseif { $login == "root"} {
			set pass root01
			return "$pass\r"
		} elseif { $login == "user4"} {
			set pass p4ssw0rD
			return "$pass\r"
		} else { 
			set pass user5 
			return "$pass\r"
			} 
	} else {
		user_auth
		}
}

############################################################################
#
#  Name    : user_auth
#  Purpose : collect password
#  Notes   : 
############################################################################
proc user_auth {} {
	set pass ""
	set timeout -1

	send_user "\nPlease enter your password: "
	stty -echo
	expect_user -re ".*\n"
	set pass $expect_out(0,string)

	set timeout 20
	send_user "\n"

	return $pass
}

############################################################################
#
#  Name    : w2ktt_scrn
#  Purpose : redraw terminal
#  Notes   : 
#  SAT term is a real cluster. There are two options, manually
#  rebuild the screen when necessary using 'puts', or run a 'newterm' which the
#  user will probably never catch. 
#
############################################################################
proc w2ktt_scrn {session_id} {
	set spawn_id $session_id
	stty -echo
	send -- "newterm\r"
	expect -re "\] "
	send -- "w2ktt\r"
}
############################################################################
#
#  Name    : ossi
#  Purpose : execute ossi scripts in SAT 
#  Notes   : sat operates in raw mode
#	     updated reading/pushing of script info
#
############################################################################
proc ossi {session_id} {
set spawn_id $session_id
set timeout 20
set home $::env(HOME)
set scriptdir $home/ossi.sc
set clearscrn "\033c\033\[1\;1H\033\[0J\n" 
send_user "Script name or leave blank for list: "
stty -raw echo
expect_user -re "(.*)\n"
set script [string trimleft $expect_out(1,string)]
stty raw

if { $script == "" } {
	send_user "\nusage: ossi scriptname\n
available scripts:\n"

	set contents [lsort [glob -directory $scriptdir *.sc]]
		foreach item $contents {
			append out $item
			append out "\n"
		}
	# clear screen to defaults b/c SAT is pants
	puts $clearscrn
	send_user $out
	send_user "\nPress Enter to continue.\n"
	expect_user -re "(.*)\r"
	w2ktt_scrn $spawn_id
	return	
}

set runcmd "$scriptdir/$script"
set logfilename $home/$script-[exec date +%F-%H-%M-%S]

if  ![file exists $runcmd] {
	puts $clearscrn
	send_user "Sorry: Script not found or doesn't exist"
	send_user "Script was $script"
	send_user "\nPress Enter to continue.\n"
	expect_user -re "(.*)\r"
	w2ktt_scrn $spawn_id
	return
	}

send -- "newterm\r"
expect -exact "\]"
send -- "ossi\r"
expect -exact "t"
log_file -a -noappend $logfilename

set file [open $runcmd "r"]
while {[ gets $file line ] != -1} {
	send -- "$line\r"
	}
close $file

expect -exact "t"
send -- "cnewterm\rt\r"
expect -re "\] "
log_file
stty -echo
send -- "w2ktt\r"
}

############################################################################
#
#  Name    : fmt
#  Purpose : format output of ossi files
#  Notes   : currently formats to tab delineated
#  TODO	   : allow user to choose separator, such as "," or ":"
#
############################################################################
proc fmt {} {
	global argv argc
	set expr {^(d.*)}

	if {$argc == 3} {
		set sep [lindex $argv 1]
		set file [lindex $argv 2]
	} elseif {$argc == 2} {
			set file [lindex $argv 1]
		}

	set fp [open $file r ]
	set file_data [read $fp]
	set data [split $file_data "\n"]
		foreach item $data {
			if { [regexp $expr $item match0] } {
				regsub {^[d,f]} $match0 "" match1
				if { [info exists sep] } {
				regsub -all {[\s\t]} $match1 $sep match2
				puts $match2
			} else {
				puts $match1
				}
			}
		}
}

############################################################################
#
#  Name    : batch_session
#  Purpose : execute one off batch cmds from prompt
#  Notes   : 
#  TODO	   : 
#
############################################################################
proc batch_session {} {
	global argv login host port
	set runcmd [lindex $argv 3]
	set fbasename [file rootname [file tail $runcmd]]
	set logfilename $fbasename-[exec date +%F-%H-%M-%S].txt

	if  ![file exists $runcmd] {
		send_user "Sorry: Script not found or doesn't exist\n"
		exit 1
		}

	set timeout -1
	log_user 0
	set session_id [init_session $login $host $port]
	set spawn_id $session_id
	expect {
		-re "ommand: " {
			send -- "newterm\r"
			expect -re "\] "
			send -- "ossi\r"
			expect -exact "t" {
			log_file -a -noappend $logfilename
			set file [open $runcmd "r"]
			while {[ gets $file line ] != -1} {
			send -- "$line\r"
				}
			close $file
			}
			expect -exact "t" {
			send -- "clogoff\rt\r"
				}
			}
		}

	expect {
		-re "n\]" {
			send -- "y\r"
			}
		-re "$login" {
			send -- "exit\r"
			}
		}
	log_file
	send_user "\nSee $logfilename for results\!\n"
}

############################################################################
#
#  Name    : init_session
#  Purpose : primary access proc
#  Notes   : logs the user into the remote system
# Let ssh supply the error msgs.  if for some reason there's a need to proxy
# the msg, then do something like this:
# set err $expect_out(buffer)
# send_error "$err ([lindex [split $remote '@'] 1])\n"
#
############################################################################
proc init_session {login host port} {
global prompt lab
set remote [format "%s@%s" "$login" "$host"]
set sshopts "-o StrictHostKeyChecking=no"
#.set sshopts "--hostkey-policy=advisory"
match_max 100000

spawn -noecho ssh $sshopts -p $port $remote
set session_id $spawn_id
set timeout 5

	expect {
		eof {
			send_error "Connection to $host was unexpectedly closed\n"
			exit
		}
		timeout {
			send_error "Connection to $host timed out\n"
			exit
		}
		-glob "Connection to * closed." {
			send_error "Connection to $host has spontaneously closed.\n"
			exit
			}
		-glob "*denied*" {
			send_error "Password not accepted.\n"
			return 10
			}
		-re "assword: " {
			if {$lab == 0} {
               			 set pass [lab_auth]
		                        } else {
       			         set pass [user_auth]
                       		 }
			send -- "$pass"
				}
		-re "Response: " {
			set pass [user_auth]
			send -- "$pass"
				}
		}

	expect {
		-glob "*Received disconnect*" {
			send_error "Connection to $host has spontaneously closed.\n"
			exit
			}
		-re "assword: " {
			send_error "automagic authentication failed, wrong password\n"
			exit
			}
		-re $prompt {
			send -- "\r"
			return $session_id
			}
		-re "513\] " {
			send -- "w2ktt\r"
			return $session_id
			}
		}
}

############################################################################
#
#  Name    : main_session
#  Purpose : main execution loop
#  Notes   : 
#  TODO	   : 
#
############################################################################
proc main_session {} {
	global login host port prompt
	set suspend 0

	if { $port == 5022 } {
		set is_sat 1
		} else {
			set is_sat 0
			}
	set ssh [init_session $login $host $port]
        set spawn_id $ssh

	interact {
		-re "~~" {
			send "~"
			}
		"~h" {
			interact_help
			}
		"~x" {
			set shell [spawn -noecho $::env(SHELL)]
			send "\n"
			interact eof
			set spawn_id $ssh
			remove_nulls 0
			expect {
				null { 
					if { $is_sat == 1 } {
						w2ktt_scrn $ssh
						} else { send "clear\n" }
					}
				}
			remove_nulls 1
			}
		"~q" {
			set suspend 1
			return
			}
		"~r" {
			set logn konnect-[exec date +%F-%H-%M-%S].log
			send_user "\nWriting to logfile $logn"
			send "\n"
			log_file $logn
			}
		"~s" {
			log_file
			send_user "\nFinished logging"
			send "\n"
			}
		"~o" {
			ossi $ssh
			}
		-nobuffer "w2ktt" {
			set is_sat 1
			}
		-nobuffer "logoff" {
			set is_sat 0
			}
# Translate standard xterm F keys to w2ktt mappings. This way we don't have
# to make global changes to .Xdefaults or .Xresources
		"\033OP" {
			#. F1 Cancel
			send "\033x\r"
			}
		"\033OQ" {
			#. F2 Refresh
			send "\033r\r"
			}
		"\033OR" {
			#. F3 Enter
			send "\033e\r"
			}
		"\033OS" {
			#. F4 Clear Field
			send "\033c\r"
			}
		"\033\[15~" {
			#. F5 Help
			send "\033h\r"
			}
		"\033\[17~" {
			#. F6 Go To Page
			send "\033dp\r"
			}
		"\033\[18~" {
			#. F7 Next Page
			send "\033n\r"
			}
		"\033\[19~" {
			#. F8 Previous Page
			send "\033p\r"
			}
		}

	if {$suspend > 0} {
		puts "\nreturned from interact via \"return\""
	} else {
		puts "\ndisconnected from $host"
	}

}

#----------------------------------------------------------------------------- 
# main
#----------------------------------------------------------------------------- 
exp_internal 0 # 1 for debugging
# set your environment
set lab 0
set prompt "(%|#|>|\=\>|\\\$)"
set login [lindex $argv 0]
set host [lindex $argv 1]

syntax
switch -regexp -- $argv {
	script {
		set login [lindex $argv 1]
		set host [lindex $argv 2]
		if {$argc == 5} {
			set port [lindex $argv 4]
			} else {
			set port 5022
			}
		batch_session
		exit
	}

	fmt {
		fmt
		exit
	}

	\-s {
		set port 5022
		main_session
	} default {
		set port 22
		main_session
	}
}
#EOF
